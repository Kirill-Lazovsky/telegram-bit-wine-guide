# -*- coding: utf-8 -*-
"""
WineGuide bot ‚Äî Final build.
Refactored with asyncio, ConversationHandlers for guides and the updated tour list.
"""

import os
import re
import asyncio
import logging
import datetime
from typing import Dict, List, Optional, Tuple, Set
from collections import Counter

# –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

# ‚îÄ‚îÄ LOGGING
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(name)s | %(message)s", level=logging.INFO)
log = logging.getLogger("wineguide")

# ‚îÄ‚îÄ ENV
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME", "MyWineBot")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@lazovsky_kirill")

ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0") or "0")
REPORT_CHAT_ID = int(os.getenv("REPORT_CHAT_ID", str(ADMIN_USER_ID or 0)) or "0")

PDF_FILE_ID = os.getenv("PDF_FILE_ID")
PDF_PATH = os.getenv("PDF_PATH", "Kak_vyibrat_horoshee_vino_v_magazine_restorane_ili_na_podarok_.pdf")
DEFAULT_GUIDE = os.getenv("DEFAULT_GUIDE_NAME", "–û—Å–Ω–æ–≤–Ω–æ–π –≥–∞–π–¥")

AIRTABLE_API = os.getenv("AIRTABLE_API_KEY")
AIRTABLE_BASE = os.getenv("AIRTABLE_BASE_ID")
T_LEADS = os.getenv("AIRTABLE_TABLE_NAME", "Leads")
T_REPORTS = os.getenv("AIRTABLE_REPORTS_TABLE", "Reports")
T_GUIDES = os.getenv("AIRTABLE_GUIDES_TABLE", "Guides")
T_REF = os.getenv("AIRTABLE_REFERRALS_TABLE", "Referrals")
T_TOUR = os.getenv("AIRTABLE_TOUR_TABLE", "TourRequests")

TZ_NAME = os.getenv("REPORT_TZ", "Europe/Paris")
try:
    from zoneinfo import ZoneInfo
    tz = ZoneInfo(TZ_NAME)
except Exception:
    tz = datetime.timezone.utc
HOUR = int(os.getenv("REPORT_TIME_HOUR", "20") or "20")
MINU = int(os.getenv("REPORT_TIME_MINUTE", "0") or "0")

# ‚îÄ‚îÄ TEXTS & CONSTANTS
TXT_WELCOME = "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ —è –ø—Ä–∏—à–ª—é PDF-–≥–∞–π–¥ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ üëá"
TXT_ALREADY = "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–∞–π–¥ üì•"
TXT_NEEDSUB = "–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –∫–∞–Ω–∞–ª.\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –≤–µ—Ä–Ω–∏—Å—å ‚Äî —è –∂–¥—É! üòâ"
TXT_ERROR = "–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —è –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
TXT_SENT = "–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏ –≥–∞–π–¥ —Å–µ–±–µ üìé"
TXT_ASK_NAME = "–ú–æ–∂–Ω–æ 10 —Å–µ–∫—É–Ω–¥? –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üôÇ\n\n–ù–∞–ø–∏—à–∏ –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
TXT_ASK_MAIL = "–°–ø–∞—Å–∏–±–æ! –û—Å—Ç–∞–≤—å e-mail, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –º–æ–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚úâÔ∏è\n\n–ù–∞–ø–∏—à–∏ e-mail –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
TXT_MAIL_OK = "–ü—Ä–∏–Ω—è–ª! –ï—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â—ë —Ä–∞–∑. üç∑"
TXT_MAIL_BAD = "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ e-mail. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
TXT_SKIPPED = "–û–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º. –°–ø–∞—Å–∏–±–æ!"
TXT_GUIDES_EMPTY = "–ö–∞—Ç–∞–ª–æ–≥ –≥–∏–¥–æ–≤ —Å–∫–æ—Ä–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è. –ó–∞–≥–ª—è–Ω–∏ —á—É—Ç—å –ø–æ–∑–∂–µ üìù"
TXT_NO_AT = "‚ö†Ô∏è Airtable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å AIRTABLE_API_KEY –∏ AIRTABLE_BASE_ID."
TXT_ADMIN_ONLY = "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
TXT_CONVO_CANCEL = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /tour."
EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")

BTN_SUB="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"; BTN_CHECK="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"; BTN_GET="–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥"; BTN_MORE="üìö –ï—â—ë –≥–∏–¥—ã"; BTN_SKIP="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler'–æ–≤
COLLECT_NAME, COLLECT_EMAIL = range(2)
TOUR_CHOICE, TOUR_NAME, TOUR_PHONE, TOUR_EMAIL, TOUR_GUESTS, TOUR_DATES, TOUR_DETAILS = range(2, 9)


# ‚îÄ‚îÄ UI
def deep_link(extra="guide") -> str:
    return f"https://t.me/{BOT_USERNAME}?start={extra}"

def kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton(BTN_GET, url=deep_link("guide"))],
                                   [InlineKeyboardButton(BTN_MORE, callback_data="open_guides")]])

def kb_subscribe() -> InlineKeyboardMarkup:
    url = f"https://t.me/{str(CHANNEL_ID).replace('@','')}"
    return InlineKeyboardMarkup([[InlineKeyboardButton(BTN_SUB, url=url)],
                                   [InlineKeyboardButton(BTN_CHECK, callback_data="check_sub")]])

def kb_skip(tag: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton(BTN_SKIP, callback_data=f"skip_{tag}")]])

# –ò–ó–ú–ï–ù–ï–ù–û: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–∞ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
def kb_tour_choice() -> InlineKeyboardMarkup:
    tours = [
        ("–ù–æ—Ä–º–∞–Ω–¥–∏—è", "tour:–ù–æ—Ä–º–∞–Ω–¥–∏—è"),
        ("–ë–æ—Ä–¥–æ", "tour:–ë–æ—Ä–¥–æ"),
        ("–ë—É—Ä–≥—É–Ω–¥–∏—è", "tour:–ë—É—Ä–≥—É–Ω–¥–∏—è"),
        ("–õ—É–∞—Ä–∞", "tour:–õ—É–∞—Ä–∞"),
        ("–ü—Ä–æ–≤–∞–Ω—Å", "tour:–ü—Ä–æ–≤–∞–Ω—Å"),
        ("–≠–ª—å–∑–∞—Å", "tour:–≠–ª—å–∑–∞—Å"),
        ("–î–æ—Ä–¥–æ–Ω—å", "tour:–î–æ—Ä–¥–æ–Ω—å"),
        ("–ë—Ä–µ—Ç–∞–Ω—å", "tour:–ë—Ä–µ—Ç–∞–Ω—å"),
        ("–°—Ç—Ä–∞–Ω–∞ –±–∞—Å–∫–æ–≤", "tour:–°—Ç—Ä–∞–Ω–∞ –±–∞—Å–∫–æ–≤"),
        ("–ë–µ–ª—å–≥–∏—è", "tour:–ë–µ–ª—å–≥–∏—è"),
        ("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", "tour:custom"),
    ]
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
    keyboard = []
    for i in range(0, len(tours), 2):
        row = [InlineKeyboardButton(text, callback_data=data) for text, data in tours[i:i+2]]
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)


def parse_utm(args: List[str]) -> Dict[str,str]:
    if not args: return {}
    raw = " ".join(args); parts = raw.split("__"); kv={}
    for token in parts[1:]:
        if "=" in token:
            k,v = token.split("=",1); kv[k.strip()]=v.strip()
    if kv: kv["_raw"]=raw
    return kv


# ‚îÄ‚îÄ notify admin
_last_alert=0.0
async def notify_error(ctx: ContextTypes.DEFAULT_TYPE, text: str, throttle=600):
    global _last_alert
    now = datetime.datetime.now().timestamp()
    if now - _last_alert < throttle and throttle > 0: return
    _last_alert = now
    try:
        if REPORT_CHAT_ID:
            await ctx.bot.send_message(REPORT_CHAT_ID, text, parse_mode="HTML")
    except Exception: pass


# ‚îÄ‚îÄ TG helpers
async def is_subscribed(uid: int, ctx: ContextTypes.DEFAULT_TYPE) -> Optional[bool]:
    try:
        m: ChatMember = await ctx.bot.get_chat_member(CHANNEL_ID, uid)
        return m.status in ("member", "administrator", "creator")
    except Exception as e:
        log.exception("get_chat_member failed: %s", e); return None

async def send_pdf_robust(chat_id: int, ctx, file_id: Optional[str], path: Optional[str]) -> None:
    if file_id:
        try:
            await ctx.bot.send_document(chat_id=chat_id, document=file_id, caption=TXT_SENT); return
        except Exception: pass
    if path and os.path.exists(path):
        with open(path, "rb") as f:
            await ctx.bot.send_document(chat_id=chat_id, document=f, filename=os.path.basename(path), caption=TXT_SENT)
    else:
        raise RuntimeError("–ù–µ—Ç PDF_FILE_ID –∏ PDF_PATH (–∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")


# ‚îÄ‚îÄ Airtable (–≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def at_headers() -> Dict[str,str]:
    if not AIRTABLE_API or not AIRTABLE_BASE: return {}
    return {"Authorization": f"Bearer {AIRTABLE_API}", "Content-Type": "application/json"}

def at_url(t: str) -> str: return f"https://api.airtable.com/v0/{AIRTABLE_BASE}/{t}"

async def at_create(t: str, fields: Dict, client: httpx.AsyncClient) -> Optional[str]:
    try:
        r = await client.post(at_url(t), json={"fields": fields}, timeout=20)
        if r.status_code in (200, 201): return r.json().get("id")
        log.error("Airtable create %s: %s", r.status_code, r.text)
    except Exception as e: log.exception("Airtable create exception: %s", e)
    return None

async def at_list_all(t: str, client: httpx.AsyncClient, formula: Optional[str] = None) -> List[Dict]:
    params = {}
    if formula: params["filterByFormula"] = formula
    out = []; offset = None
    while True:
        if offset: params["offset"] = offset
        try:
            r = await client.get(at_url(t), params=params, timeout=30)
            if r.status_code != 200:
                log.error("Airtable list %s: %s", r.status_code, r.text); break
            data = r.json(); out += data.get("records", []); offset = data.get("offset")
            if not offset: break
        except Exception as e:
            log.exception("Airtable list exception: %s", e); break
    return out

def today() -> str: return datetime.datetime.now(tz).date().isoformat()

# ‚îÄ‚îÄ ConversationHandler –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä
async def tour_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç—É—Ä."""
    await update.message.reply_text(
        "–†–∞–¥, —á—Ç–æ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –≤–∏–Ω–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏! üá´üá∑\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.",
        reply_markup=kb_tour_choice()
    )
    return TOUR_CHOICE

async def tour_choice(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç—É—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è."""
    query = update.callback_query
    await query.answer()

    choice = query.data.split(":", 1)[1]
    
    if choice == "custom":
        ctx.user_data['tour_choice'] = "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
        ctx.user_data['tour_is_custom'] = True
    else:
        ctx.user_data['tour_choice'] = choice
        ctx.user_data['tour_is_custom'] = False

    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{ctx.user_data['tour_choice']}</b>.\n\n"
                                  "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É. "
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", parse_mode="HTML")
    return TOUR_NAME

async def tour_name(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω."""
    ctx.user_data['tour_name'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏.")
    return TOUR_PHONE

async def tour_phone(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email."""
    ctx.user_data['tour_phone'] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à e-mail.")
    return TOUR_EMAIL

async def tour_email(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç email –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π."""
    email = update.message.text.strip()
    if not EMAIL_RE.match(email):
        await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return TOUR_EMAIL

    ctx.user_data['tour_email'] = email
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–µ—Ö–∞—Ç—å?")
    return TOUR_GUESTS

async def tour_guests(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—ã."""
    ctx.user_data['tour_guests'] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ–Ω–µ—Ü —Å–µ–Ω—Ç—è–±—Ä—è' –∏–ª–∏ '10-15 –æ–∫—Ç—è–±—Ä—è').")
    return TOUR_DATES

async def tour_dates(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—ã. –ï—Å–ª–∏ —Ç—É—Ä –∫–∞—Å—Ç–æ–º–Ω—ã–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏. –ò–Ω–∞—á–µ - –∑–∞–≤–µ—Ä—à–∞–µ—Ç."""
    ctx.user_data['tour_dates'] = update.message.text
    if ctx.user_data.get('tour_is_custom'):
        await update.message.reply_text("–¢–∞–∫ –∫–∞–∫ –≤—ã –≤—ã–±—Ä–∞–ª–∏ '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return TOUR_DETAILS
    else:
        return await tour_final_step(update, ctx)

async def tour_details(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç—É—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç."""
    ctx.user_data['tour_details'] = update.message.text
    return await tour_final_step(update, ctx)

async def tour_final_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Airtable –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    user = update.effective_user
    data = ctx.user_data
    fields = {
        "date": today(), "chat_id": str(user.id), "username": user.username or "",
        "name": data.get('tour_name'), "phone": data.get('tour_phone'), "email": data.get('tour_email'),
        "guests_count": data.get('tour_guests'), "chosen_tour": data.get('tour_choice'),
        "desired_dates": data.get('tour_dates'), "details": data.get('tour_details', ''),
    }

    async with httpx.AsyncClient(headers=at_headers()) as client:
        record_id = await at_create(T_TOUR, fields, client)

    if record_id:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –Ø —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Å—å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. üç∑")
        admin_text = (
            f"üõéÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—É—Ä: <b>{fields['chosen_tour']}</b>\n\n"
            f"<b>–ò–º—è:</b> {fields['name']}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {fields['phone']}\n"
            f"<b>Email:</b> {fields['email']}\n<b>–ì–æ—Å—Ç–µ–π:</b> {fields['guests_count']}\n"
            f"<b>–î–∞—Ç—ã:</b> {fields['desired_dates']}\n"
        )
        if fields['details']: admin_text += f"<b>–î–µ—Ç–∞–ª–∏:</b> {fields['details']}\n"
        admin_text += f"\n–û—Ç: @{user.username} (ID: {user.id})"
        await notify_error(ctx, admin_text, throttle=0)
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await notify_error(ctx, "Airtable: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç—É—Ä–æ–≤.", throttle=0)

    data.clear()
    return ConversationHandler.END


async def cancel_conversation(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(TXT_CONVO_CANCEL)
    ctx.user_data.clear()
    return ConversationHandler.END

# ‚îÄ‚îÄ –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ start –∏ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–∞–π–¥–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
    await update.message.reply_text(TXT_WELCOME, reply_markup=kb_start())


# ‚îÄ‚îÄ post_init: –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
async def post_init(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start","–ù–∞—á–∞—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        BotCommand("tour","‚úàÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–Ω–Ω—ã–π —Ç—É—Ä"),
        BotCommand("resend","üì• –ü—Ä–∏—Å–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–∞–π–¥"),
        BotCommand("reflink","üîó –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞"),
        BotCommand("cancel","‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        BotCommand("whoami","üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID"),
    ])

# ‚îÄ‚îÄ MAIN
def main() -> None:
    if not BOT_TOKEN: raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä
    tour_handler = ConversationHandler(
        entry_points=[CommandHandler("tour", tour_start)],
        states={
            TOUR_CHOICE: [CallbackQueryHandler(tour_choice, pattern="^tour:")],
            TOUR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_name)],
            TOUR_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_phone)],
            TOUR_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_email)],
            TOUR_GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_guests)],
            TOUR_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_dates)],
            TOUR_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_details)],
        },
        fallbacks=[CommandHandler("start", start), CommandHandler("cancel", cancel_conversation)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(tour_handler)
    # ... (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
    # collection_handler –¥–ª—è –≥–∞–π–¥–æ–≤, admin commands, –∏ —Ç.–¥.)

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
